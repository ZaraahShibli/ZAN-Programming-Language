/* Generated By:JavaCC: Do not edit this line. MyNewGrammarConstants.java */
package ZAN;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface MyNewGrammarConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int PLUS = 5;
  /** RegularExpression Id. */
  int MINUS = 6;
  /** RegularExpression Id. */
  int MULTIPLY = 7;
  /** RegularExpression Id. */
  int DIVIDE = 8;
  /** RegularExpression Id. */
  int POWER = 9;
  /** RegularExpression Id. */
  int RATE = 10;
  /** RegularExpression Id. */
  int ASSIGN = 11;
  /** RegularExpression Id. */
  int SQRT = 12;
  /** RegularExpression Id. */
  int QUBIC = 13;
  /** RegularExpression Id. */
  int COS = 14;
  /** RegularExpression Id. */
  int SIN = 15;
  /** RegularExpression Id. */
  int TAN = 16;
  /** RegularExpression Id. */
  int SEC = 17;
  /** RegularExpression Id. */
  int CSC = 18;
  /** RegularExpression Id. */
  int COT = 19;
  /** RegularExpression Id. */
  int FACTORIAL = 20;
  /** RegularExpression Id. */
  int AND = 21;
  /** RegularExpression Id. */
  int OR = 22;
  /** RegularExpression Id. */
  int NOT = 23;
  /** RegularExpression Id. */
  int EQUALITY = 24;
  /** RegularExpression Id. */
  int INQUALITY = 25;
  /** RegularExpression Id. */
  int LESS_THAN = 26;
  /** RegularExpression Id. */
  int GREATER_THAN = 27;
  /** RegularExpression Id. */
  int LESS_THAN_EQUAL = 28;
  /** RegularExpression Id. */
  int GREATER_THAN_EQUAL = 29;
  /** RegularExpression Id. */
  int IF = 30;
  /** RegularExpression Id. */
  int THEN = 31;
  /** RegularExpression Id. */
  int ELSE = 32;
  /** RegularExpression Id. */
  int SWITCH = 33;
  /** RegularExpression Id. */
  int CASE = 34;
  /** RegularExpression Id. */
  int OUT = 35;
  /** RegularExpression Id. */
  int CASE_NO = 36;
  /** RegularExpression Id. */
  int TRUE = 37;
  /** RegularExpression Id. */
  int FALSE = 38;
  /** RegularExpression Id. */
  int NULL = 39;
  /** RegularExpression Id. */
  int FOR = 40;
  /** RegularExpression Id. */
  int DO = 41;
  /** RegularExpression Id. */
  int WHILE = 42;
  /** RegularExpression Id. */
  int RETURN = 43;
  /** RegularExpression Id. */
  int DIGIT = 44;
  /** RegularExpression Id. */
  int LETTER = 45;
  /** RegularExpression Id. */
  int MORE_DIGIT = 46;
  /** RegularExpression Id. */
  int STOP = 47;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\r\"",
    "\"\\t\"",
    "\"\\n\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"^\"",
    "\"%\"",
    "\"=\"",
    "\"sqrt\"",
    "\"qubic\"",
    "\"cos\"",
    "\"sin\"",
    "\"tan\"",
    "\"sec\"",
    "\"csc\"",
    "\"cot\"",
    "\"!\"",
    "\"&&\"",
    "\"\\\\\"",
    "\"~\"",
    "\"==\"",
    "\"!=\"",
    "\"!<\"",
    "\"<!\"",
    "\"<=\"",
    "\">=\"",
    "\"if \"",
    "\"then \"",
    "\"else \"",
    "\"switch\"",
    "\"case\"",
    "\"out\"",
    "\"caseNo\"",
    "\"TRUE\"",
    "\"false\"",
    "\"null\"",
    "\"for\"",
    "\"do\"",
    "\"while\"",
    "\"return\"",
    "<DIGIT>",
    "<LETTER>",
    "<MORE_DIGIT>",
    "\";\"",
    "\"_\"",
    "\"(\"",
    "\")\"",
  };

}
