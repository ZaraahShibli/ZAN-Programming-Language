/* Generated By:JavaCC: Do not edit this line. MyNewGrammar.java */
package ZAN;
import java.io.*;
import java.util.Scanner;

public class MyNewGrammar implements MyNewGrammarConstants {
  public static void main(String args []) throws ParseException
  {
    MyNewGrammar parser;
    try
    {
        System.out.print("***************** (ZAN) LANGUAGE *****************\u005cn" +
          "Our language allow you to Enter many expressions.\u005cn" +
          "  *.if statament like.. if (6+12) then 456-68!<;\u005cn" +
          "  *.if statament like.. if (81-24) then 4-6==;\u005cn" +
          "  *.if statament like.. if (456%57) then _R452=12;\u005cn" +
          "  *.if statament like.. if (96*11) then _R=_q;\u005cn" +
          "  *.if statament like.. if (6+12) then 456-68!< else 445-87==;\u005cn" +
           "  *.Addition operator like.. _R=45+547;\u005cn" +
          "  *.Subtraction operator like.. _R=45-547;\u005cn" +
          "  *.Multiplication operator like.. _R=45*547;\u005cn" +
          "  *.Division operator like.. _R=45/547;\u005cn" +
          "  *.Rate operator like.. _R=45%547;\u005cn" +
          "  *.Equal operator like.. 45-547==;\u005cn" +
          "  *.Inequal operator like.. 45-547!=;\u005cn" +
          "  *.Less than operator like.. 45-547!<;\u005cn" +
          "  *.Greater than operator like.. 45-547<!;\u005cn" +
          "  *.Less than or equal operator like.. 45-547<=;\u005cn" +
          "  *.Greater than or equal operator like.. 45-547>=;\u005cn" +
          "  *.Not operator like.. 45~;\u005cn" +
          "  *.Factorial operator like.. 45!;\u005cn" +
          "**************************************************\u005cn");
          System.out.println("Enter an expression from the list above"+
          "\u005cn**(there is a space between the 'if' and the expretion and the 'then'): ");
          parser = new MyNewGrammar(System.in);
          MyNewGrammar.STMT();
          System.out.println("Your statement is ");
          System.out.println("Correct statement");
          ////////////////////////////////////////////////////////////////////

    } // End try
    catch (ParseException e)
    {
      System.out.println("Your statement is ");
      System.out.println("Wrong statement! ");
    } // End catch
  }

//*******************************************************************
//***************************** Methods *****************************
//
  static final public void STMTS() throws ParseException {
    STMT();
    jj_consume_token(STOP);

  }

  static final public void STMT() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 48:
      IDENTIFER();
      jj_consume_token(ASSIGN);
      EXPERETION();
      break;
    case MORE_DIGIT:
      TERM();
      POST_OPERATION();
      break;
    case IF:
      IF_EXPERETION();
      break;
    default:
      jj_la1[0] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }

  }

  static final public void POST_OPERATION() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MINUS:
      jj_consume_token(MINUS);
      TERM();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND:
        jj_consume_token(AND);
        break;
      case OR:
        jj_consume_token(OR);
        break;
      case EQUALITY:
        jj_consume_token(EQUALITY);
        break;
      case INQUALITY:
        jj_consume_token(INQUALITY);
        break;
      case LESS_THAN:
        jj_consume_token(LESS_THAN);
        break;
      case GREATER_THAN:
        jj_consume_token(GREATER_THAN);
        break;
      case LESS_THAN_EQUAL:
        jj_consume_token(LESS_THAN_EQUAL);
        break;
      case GREATER_THAN_EQUAL:
        jj_consume_token(GREATER_THAN_EQUAL);
        break;
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    case NOT:
      jj_consume_token(NOT);
      break;
    case FACTORIAL:
      jj_consume_token(FACTORIAL);
      break;
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }

  }

  static final public void IDENTIFER() throws ParseException {
    jj_consume_token(48);
    jj_consume_token(LETTER);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MORE_DIGIT:
      jj_consume_token(MORE_DIGIT);
      break;
    default:
      jj_la1[3] = jj_gen;
      ;
    }

  }

  static final public void EXPERETION() throws ParseException {
    TERM();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS:
    case MINUS:
    case MULTIPLY:
    case DIVIDE:
    case RATE:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MULTIPLY:
        jj_consume_token(MULTIPLY);
        break;
      case RATE:
        jj_consume_token(RATE);
        break;
      case DIVIDE:
        jj_consume_token(DIVIDE);
        break;
      case PLUS:
        jj_consume_token(PLUS);
        break;
      case MINUS:
        jj_consume_token(MINUS);
        break;
      default:
        jj_la1[4] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      EXPERETION();
      break;
    default:
      jj_la1[5] = jj_gen;
      ;
    }

  }

  static final public void TERM() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MORE_DIGIT:
      jj_consume_token(MORE_DIGIT);
      break;
    case 48:
      IDENTIFER();

      break;
    default:
      jj_la1[6] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void IF_EXPERETION() throws ParseException {
    jj_consume_token(IF);
    jj_consume_token(49);
    EXPERETION();
    jj_consume_token(50);
    jj_consume_token(THEN);
    STMT();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ELSE:
      jj_consume_token(ELSE);
      STMT();
      break;
    default:
      jj_la1[7] = jj_gen;
      ;
    }

  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public MyNewGrammarTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[8];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x40000000,0x3f600000,0x900040,0x0,0x5e0,0x5e0,0x0,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x14000,0x0,0x0,0x4000,0x0,0x0,0x14000,0x1,};
   }

  /** Constructor with InputStream. */
  public MyNewGrammar(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public MyNewGrammar(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new MyNewGrammarTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 8; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 8; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public MyNewGrammar(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new MyNewGrammarTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 8; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 8; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public MyNewGrammar(MyNewGrammarTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 8; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(MyNewGrammarTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 8; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[51];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 8; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 51; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

    // End Main
}
